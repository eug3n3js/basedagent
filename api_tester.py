#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import sys
import time
from typing import Optional, Dict, Any, List
import httpx
from pydantic import BaseModel


class WalletAuthRequest(BaseModel):
    wallet_address: str
    signature: str


class SendEmailCodeRequest(BaseModel):
    email: str


class VerifyEmailCodeRequest(BaseModel):
    email: str
    code: str


class MessageCreate(BaseModel):
    content: str
    chat_id: int


class APITester:
    def __init__(self, base_url: str = "http://localhost:3000"):
        self.base_url = base_url
        self.client = httpx.AsyncClient(timeout=30.0)
        
        # –¢–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.current_user = {
            "access_token": None, 
            "token_type": None,
            "exp": None,
            "user_id": None,
            "wallet_address": None
        }
        
        self.test_results = {
            "auth": {},
            "user": {},
            "chat": {},
            "events": {},
            "errors": []
        }
        
        self.start_time = None
        self.end_time = None

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP –∫–ª–∏–µ–Ω—Ç"""
        await self.client.aclose()

    def print_response(self, response: httpx.Response, title: str):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç"""
        print(f"\n{'='*50}")
        print(f"{title}")
        print(f"{'='*50}")
        print(f"Status Code: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        
        try:
            response_data = response.json()
            print(f"Response: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        except:
            print(f"Response Text: {response.text}")
        
        return response

    def get_headers(self, include_auth: bool = True) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        headers = {"Content-Type": "application/json"}
        if include_auth and self.current_user["access_token"]:
            headers["Authorization"] = f"Bearer {self.current_user['access_token']}"
        return headers

    async def test_get_auth_message(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        try:
            response = await self.client.get(f"{self.base_url}/auth/message")
            self.print_response(response, "GET AUTH MESSAGE")
            
            if response.status_code == 200:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def test_wallet_authenticate(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫"""
        print("\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫...")
        
        wallet_address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–∏–ª–∏ Enter –¥–ª—è '0x1234567890abcdef'): ").strip()
        if not wallet_address:
            wallet_address = "0x1234567890abcdef"
        
        signature = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å (–∏–ª–∏ Enter –¥–ª—è 'test_signature'): ").strip()
        if not signature:
            signature = "test_signature"
        
        auth_data = WalletAuthRequest(
            wallet_address=wallet_address,
            signature=signature
        )
        
        try:
            response = await self.client.post(
                f"{self.base_url}/auth/authenticate",
                json=auth_data.dict()
            )
            self.print_response(response, "WALLET AUTHENTICATE")
            
            if response.status_code == 200:
                data = response.json()
                self.current_user["access_token"] = data.get("access_token")
                self.current_user["token_type"] = data.get("token_type")
                self.current_user["exp"] = data.get("exp")
                print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    async def test_send_email_code(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email"""
        print("\nüìß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        email = input("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ (–∏–ª–∏ Enter –¥–ª—è 'test@example.com'): ").strip()
        if not email:
            email = "test@example.com"
        
        email_data = SendEmailCodeRequest(email=email)
        
        try:
            response = await self.client.post(
                f"{self.base_url}/auth/send-email-code",
                json=email_data.dict()
            )
            self.print_response(response, "SEND EMAIL CODE")
            
            if response.status_code == 200:
                print("‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
            return False

    async def test_verify_email_code(self):
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email –∫–æ–¥–∞"""
        print("\nüìß –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email –∫–æ–¥–∞...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        email = input("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ Enter –¥–ª—è 'test@example.com'): ").strip()
        if not email:
            email = "test@example.com"
        
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ Enter –¥–ª—è '123456'): ").strip()
        if not code:
            code = "123456"
        
        verify_data = VerifyEmailCodeRequest(email=email, code=code)
        
        try:
            response = await self.client.post(
                f"{self.base_url}/auth/verify-email-code",
                json=verify_data.dict(),
                headers=self.get_headers()
            )
            self.print_response(response, "VERIFY EMAIL CODE")
            
            if response.status_code == 200:
                print("‚úÖ Email –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return False

    async def test_get_user_profile(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        try:
            response = await self.client.get(
                f"{self.base_url}/user/me",
                headers=self.get_headers()
            )
            self.print_response(response, "GET USER PROFILE")
            
            if response.status_code == 200:
                print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

    async def test_create_chat(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        try:
            response = await self.client.post(
                f"{self.base_url}/chat/",
                headers=self.get_headers()
            )
            self.print_response(response, "CREATE CHAT")
            
            if response.status_code == 200:
                data = response.json()
                chat_id = data.get("id")
                if chat_id:
                    print(f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {chat_id}")
                    return chat_id
                else:
                    print("‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            return False

    async def test_get_user_chats(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        limit = input("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (–∏–ª–∏ Enter –¥–ª—è 10): ").strip()
        if not limit:
            limit = 10
        
        offset = input("–í–≤–µ–¥–∏—Ç–µ offset (–∏–ª–∏ Enter –¥–ª—è 0): ").strip()
        if not offset:
            offset = 0
        
        try:
            response = await self.client.get(
                f"{self.base_url}/chat/?limit={limit}&offset={offset}",
                headers=self.get_headers()
            )
            self.print_response(response, "GET USER CHATS")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —á–∞—Ç–æ–≤!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {e}")
            return False

    async def test_get_chat_by_id(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ ID"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ ID...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è 1): ").strip()
        if not chat_id:
            chat_id = "1"
        
        try:
            response = await self.client.get(
                f"{self.base_url}/chat/{chat_id}",
                headers=self.get_headers()
            )
            self.print_response(response, "GET CHAT BY ID")
            
            if response.status_code == 200:
                print("‚úÖ –ß–∞—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            return False

    async def test_get_chat_messages(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è 1): ").strip()
        if not chat_id:
            chat_id = "1"
        
        limit = input("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (–∏–ª–∏ Enter –¥–ª—è 10): ").strip()
        if not limit:
            limit = 10
        
        offset = input("–í–≤–µ–¥–∏—Ç–µ offset (–∏–ª–∏ Enter –¥–ª—è 0): ").strip()
        if not offset:
            offset = 0
        
        try:
            response = await self.client.get(
                f"{self.base_url}/chat/{chat_id}/messages?limit={limit}&offset={offset}",
                headers=self.get_headers()
            )
            self.print_response(response, "GET CHAT MESSAGES")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–æ–æ–±—â–µ–Ω–∏–π!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False

    async def test_send_message(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è 1): ").strip()
        if not chat_id:
            chat_id = "1"
        
        content = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?'): ").strip()
        if not content:
            content = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
        
        message_data = MessageCreate(
            content=content,
            chat_id=int(chat_id)
        )
        
        try:
            response = await self.client.post(
                f"{self.base_url}/chat/{chat_id}/message/",
                json=message_data.dict(),
                headers=self.get_headers()
            )
            self.print_response(response, "SEND MESSAGE")
            
            if response.status_code == 200:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_detail}")
                except:
                    print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def test_send_message_with_task(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è 1): ").strip()
        if not chat_id:
            chat_id = "1"
        
        task_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ Enter –¥–ª—è 'summarize'): ").strip()
        if not task_name:
            task_name = "summarize"
        
        content = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç'): ").strip()
        if not content:
            content = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç"
        
        message_data = MessageCreate(
            content=content,
            chat_id=int(chat_id)
        )
        
        try:
            response = await self.client.post(
                f"{self.base_url}/chat/{chat_id}/message/{task_name}",
                json=message_data.dict(),
                headers=self.get_headers()
            )
            self.print_response(response, "SEND MESSAGE WITH TASK")
            
            if response.status_code == 200:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π: {e}")
            return False

    async def test_get_task_types(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
        print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        try:
            response = await self.client.get(f"{self.base_url}/chat/task", headers=self.get_headers())
            self.print_response(response, "GET TASK TYPES")
            
            if response.status_code == 200:
                print("‚úÖ –¢–∏–ø—ã –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {e}")
            return False

    async def test_get_user_events(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        try:
            response = await self.client.get(
                f"{self.base_url}/events/all",
                headers=self.get_headers()
            )
            self.print_response(response, "GET USER EVENTS")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–æ–±—ã—Ç–∏–π!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return False

    async def test_get_chat_status(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞...")
        
        if not self.current_user["access_token"]:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return False
        
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è 1): ").strip()
        if not chat_id:
            chat_id = "1"
        
        try:
            response = await self.client.get(f"{self.base_url}/chat/{chat_id}/status", headers=self.get_headers())
            self.print_response(response, "GET CHAT STATUS")
            
            if response.status_code == 200:
                status_data = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ {chat_id}: {status_data.get('is_pending', False)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_detail}")
                except:
                    print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞: {e}")
            return False

    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*80)
        print("üöÄ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        print("="*80)
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –¢–ï–°–¢ –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        
        print("\nüîê AUTH ROUTER (/auth):")
        print("  1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("  2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫")
        print("  3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email")
        print("  4. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –∫–æ–¥–∞")
        
        print("\nüë§ USER ROUTER (/user):")
        print("  5. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        print("\nüí¨ CHAT ROUTER (/chat):")
        print("  6. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞")
        print("  7. –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  8. –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ ID")
        print("  9. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞")
        print("  10. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("  11. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π")
        print("  12. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á")
        
        print("\nüìä EVENTS ROUTER (/events):")
        print("  13. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        print("\nüí¨ CHAT STATUS:")
        print("  14. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞")
        
        print("\nüéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("  0. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
        print("  q. –í—ã—Ö–æ–¥")
        print("\n" + "="*80)

    async def run_interactive_tests(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.start_time = time.time()
        
        # –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = {
            1: ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", self.test_get_auth_message),
            2: ("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫", self.test_wallet_authenticate),
            3: ("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email", self.test_send_email_code),
            4: ("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –∫–æ–¥–∞", self.test_verify_email_code),
            5: ("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.test_get_user_profile),
            6: ("–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞", self.test_create_chat),
            7: ("–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.test_get_user_chats),
            8: ("–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ ID", self.test_get_chat_by_id),
            9: ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞", self.test_get_chat_messages),
            10: ("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", self.test_send_message),
            11: ("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π", self.test_send_message_with_task),
            12: ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á", self.test_get_task_types),
            13: ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.test_get_user_events),
            14: ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞", self.test_get_chat_status),
        }
        
        successful_tests = 0
        total_tests = 0
        
        while True:
            self.show_menu()
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞ –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip().lower()
            
            if choice == 'q':
                break
            elif choice == '0':
                # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
                print("\nüöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í...")
                for test_num, (test_name, test_func) in tests.items():
                    print(f"\n{test_num}. {test_name}...")
                    try:
                        result = await test_func()
                        total_tests += 1
                        if result:
                            successful_tests += 1
                    except Exception as e:
                        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
                        total_tests += 1
                break
            else:
                try:
                    test_num = int(choice)
                    if test_num in tests:
                        test_name, test_func = tests[test_num]
                        print(f"\n{test_name}...")
                        try:
                            result = await test_func()
                            total_tests += 1
                            if result:
                                successful_tests += 1
                        except Exception as e:
                            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
                            total_tests += 1
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞!")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞!")
        
        self.end_time = time.time()
        duration = self.end_time - self.start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        if total_tests > 0:
            print(f"\n{'='*80}")
            print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
            print(f"{'='*80}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests*100):.1f}%")
            
            if successful_tests == total_tests:
                print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"\n‚ö†Ô∏è  {total_tests - successful_tests} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
        print(f"\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
        print(f"   - Swagger UI: {self.base_url}/docs")
        print(f"   - ReDoc: {self.base_url}/redoc")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = APITester()
    try:
        await tester.run_interactive_tests()
    finally:
        await tester.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
